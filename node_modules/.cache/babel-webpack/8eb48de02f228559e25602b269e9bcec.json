{"ast":null,"code":"import _asyncToGenerator from \"/Users/watcharapun/Documents/development-[DEV]/stream-ipcam/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as cocoSSD from '@tensorflow-models/coco-ssd';\nimport * as i0 from \"@angular/core\";\nexport class AppComponent {\n  constructor() {\n    this.title = 'stream-ipcam';\n\n    this.detectFrame = (video, model) => {\n      model.detect(video).then(predictions => {\n        this.renderPredictions(predictions);\n        requestAnimationFrame(() => {\n          this.detectFrame(video, model);\n        });\n      });\n    };\n\n    this.renderPredictions = predictions => {\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      canvas.width = 1280;\n      canvas.height = 720;\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Font options.\n\n      const font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      ctx.drawImage(this.video, 0, 0, 1280, 720);\n      predictions.forEach(prediction => {\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1];\n        const width = prediction.bbox[2];\n        const height = prediction.bbox[3]; // Draw the bounding box.\n\n        ctx.strokeStyle = \"#00FFFF\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(x, y, width, height); // Draw the label background.\n\n        ctx.fillStyle = \"#00FFFF\";\n        const textWidth = ctx.measureText(prediction.class).width;\n        const textHeight = parseInt(font, 10); // base 10\n\n        ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n      });\n      predictions.forEach(prediction => {\n        const x = prediction.bbox[0];\n        const y = prediction.bbox[1]; // Draw the text last to ensure it's on top.\n\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(prediction.class, x, y);\n      });\n    };\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    this.video = document.getElementById(\"img-ipcam\"); // this.predictWithCocoModel();\n  }\n\n  predictWithCocoModel() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const model = yield cocoSSD.load({\n        base: 'mobilenet_v2'\n      });\n\n      _this.detectFrame(_this.video, model);\n\n      console.log('model loaded');\n    })();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[\"id\", \"canvas\", \"width\", \"1280\", \"height\", \"720\"], [\"id\", \"img-ipcam\", \"width\", \"1280\", \"height\", \"720\", \"src\", \"http://192.168.4.179:8080/video\", \"crossorigin\", \"anonymous\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1, \"Stream Video from IP Camera\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"canvas\", 0);\n      i0.ɵɵelement(3, \"img\", 1);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"sources":["/Users/watcharapun/Documents/development-[DEV]/stream-ipcam/src/app/app.component.ts","/Users/watcharapun/Documents/development-[DEV]/stream-ipcam/src/app/app.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\n\nimport * as cocoSSD from '@tensorflow-models/coco-ssd';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n  title = 'stream-ipcam';\n\n  video: any;\n  constructor() {\n\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngAfterViewInit() {\n    this.video = <HTMLVideoElement>document.getElementById(\"img-ipcam\");\n    // this.predictWithCocoModel();\n  }\n\n  public async predictWithCocoModel() {\n    const model = await cocoSSD.load({ base: 'mobilenet_v2' });\n    this.detectFrame(this.video, model);\n    console.log('model loaded');\n  }\n\n  detectFrame = (video: any, model: cocoSSD.ObjectDetection) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  }\n\n  renderPredictions = (predictions: any[]) => {\n    const canvas = <HTMLCanvasElement>document.getElementById(\"canvas\");\n\n    const ctx = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n\n    canvas.width = 1280;\n    canvas.height = 720;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    ctx.drawImage(this.video, 0, 0, 1280, 720);\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n}\n","<h3>Stream Video from IP Camera</h3>\n\n<canvas id=\"canvas\" width=\"1280\" height=\"720\"></canvas>\n<img id=\"img-ipcam\" width=\"1280\" height=\"720\" src=\"http://192.168.4.179:8080/video\" crossorigin=\"anonymous\">\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}